{"version":3,"sources":["logo.svg","card.js","App.js","serviceWorker.js","detail.js","favs.js","index.js"],"names":["module","exports","Card","props","Title","Year","Poster","markFav","isFav","imdbID","Type","data","hideButton","console","log","className","to","src","alt","Button","color","onClick","App","storage","JSON","parse","window","localStorage","getItem","useState","search","setsearch","results","setresults","loading","setloading","Selected","setSelected","onClickSearch","axios","get","toLowerCase","then","Response","Array","isArray","length","items","localData","a","item","b","push","getFavs","Search","map","each","catch","e","Alert","warning","useEffect","obj","mappedRes","maindata","local","setItem","stringify","filter","syncStorage","onSubmit","preventDefault","type","placeholder","value","onChange","target","Dropdown","title","activeKey","onSelect","Item","eventKey","Icon","icon","key","Loader","content","Boolean","location","hostname","match","Detail","setdata","params","id","Released","Rated","Genre","Writer","Actors","Plot","history","goBack","style","cursor","size","Favs","maxWidth","margin","AppNew","path","component","exact","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.110ea334.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './card.scss'\nimport { Button } from 'rsuite'\nimport { Link } from 'react-router-dom'\n\nfunction Card(props) {\n    const { Title, Year, Poster, markFav, isFav, imdbID, Type, data, hideButton } = props\n    console.log(isFav)\n    return (\n        <div className=\"card\">\n            <Link to={`/${Type}/${imdbID}`}>\n                <div className=\"img-wrapper\">\n                    <img src={Poster} alt={Title} />\n                </div>\n            </Link>\n            <div className=\"content\">\n                <p className=\"title\">{Title}</p>\n                <p className=\"release-date\">{Year}</p>\n                {\n                    !hideButton\n                        ? <Button color={isFav ? \"red\" : \"blue\"} onClick={() => markFav(data, !isFav)}>{isFav ? \"remove\" : \"mark as favourite\"}</Button>\n                        : null\n                }\n\n            </div>\n        </div>\n    )\n}\n\nexport default Card","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Icon, Loader, Alert } from 'rsuite';\nimport Card from './card';\nimport axios from 'axios'\n\nconst syncStorage = (maindata, data, isFav) => {\n  const local = JSON.parse(window.localStorage.getItem(\"favs\")) || []\n  if (!isFav) {\n    return window.localStorage.setItem(\"favs\", JSON.stringify(local.filter(each => each.imdbID !== data.imdbID)))\n  }\n  else {\n    data.isFav = true\n    local.push(data)\n    window.localStorage.setItem(\"favs\", JSON.stringify(local))\n  }\n\n  // const id = local.some(({ imdbID }) => imdbID === data.imdbID)\n  // console.log(\"222222222222222222222\", id)\n  // if (id) {\n  //   for (let item of local) {\n  //     if (item.imdbID === data.imdbID) {\n  //       item = data\n  //     }\n  //   }\n  // }\n  // else {\n  //   local.push(data)\n  // }\n  // window.localStorage.setItem(\"favs\", JSON.stringify(local))\n}\nconst getFavs = (data, localData) => {\n  const a = {}\n  for (let item of localData) {\n    if (item.isFav) {\n      a[item.imdbID] = true\n    }\n  }\n  const b = []\n  for (let item of data) {\n    if (item.imdbID in a) {\n      b.push({\n        ...item,\n        isFav: true\n      })\n    }\n    else {\n      b.push({\n        ...item,\n        isFav: false\n      })\n    }\n  }\n  return b\n}\nfunction App(props) {\n  const storage = JSON.parse(window.localStorage.getItem(\"favs\"))\n\n  const [search, setsearch] = useState('war')\n  const [results, setresults] = useState(null)\n  const [loading, setloading] = useState(false)\n  const [Selected, setSelected] = useState('Movie')\n\n  const onChange = (e) => {\n    setsearch(e.target.value)\n  }\n  const onSubmitSearch = (e) => {\n    e.preventDefault()\n\n  }\n  const onClickSearch = () => {\n    setloading(true)\n    axios.get(`http://www.omdbapi.com/?s=${search}&type=${Selected.toLowerCase()}&apikey=44a4d11c&page=1`)\n      .then(({ data }) => {\n        if (data.Response == \"True\") {\n          console.log(\"data => \", data)\n          if (storage && Array.isArray(storage) && storage.length) {\n            const items = getFavs(data.Search, storage)\n            setresults(items)\n          }\n          else {\n            setresults(data.Search.map(each => ({ ...each, isFav: false })))\n          }\n          setloading(false)\n        }\n\n      })\n      .catch(e => {\n        Alert.warning(e)\n      })\n\n  }\n  useEffect(() => {\n    search.length && onClickSearch()\n    return () => {\n    }\n  }, [search])\n\n  useEffect(() => {\n    console.log(\"got\", results)\n    return () => {\n    }\n  }, [results])\n\n  const select = (e, a) => setSelected(e)\n\n  const markFav = (obj, isFav) => {\n    console.log(\"sssssssssssssss\", obj)\n\n    const mappedRes = results.map(each => {\n      return {\n        ...each,\n        isFav: obj.imdbID === each.imdbID ? isFav : each.isFav\n      }\n    })\n    console.log(\"sssssssssssssss\", mappedRes, obj)\n    setresults(mappedRes)\n    syncStorage(mappedRes, obj, isFav)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <div className=\"logo\">Movie Mania</div>\n        <div className=\"favourites\">\n          <Link to=\"/favs\">Favourites</Link>\n        </div>\n      </div>\n      <div className=\"main\">\n        <div className=\"search-wrapper\">\n          <div className=\"search-inner\">\n            <form onSubmit={onSubmitSearch}>\n              <input type=\"text\" placeholder=\"search for a movie\" className=\"default-input\" value={search} onChange={onChange} />\n              <Dropdown title={Selected} activeKey={Selected} onSelect={select}>\n                <Dropdown.Item eventKey=\"Movie\" >Movies</Dropdown.Item>\n                <Dropdown.Item eventKey=\"Series\">Series</Dropdown.Item>\n              </Dropdown>\n              <span className=\"search-icon\" onClick={onClickSearch}>\n                <Icon icon=\"search\" />\n              </span>\n            </form>\n          </div>\n        </div>\n        {\n          !loading && !results\n            ? <div className=\"loading-wrapper\">\n              <p>Search for a movie</p>\n            </div>\n            : !loading && results && results.length\n              ? <div className=\"main-content\">\n                {\n                  results.map(each => {\n                    return <Card key={each.imdbID} {...each} markFav={markFav} data={each} />\n                  })\n                }\n              </div>\n              : !loading && results && !results.length\n                ? <div className=\"main-content\">No results found for \"{search}\"</div>\n                : <div className=\"loading-wrapper\">\n                  <Loader content=\"loading...\" />\n                </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport './detail.scss'\nimport { Icon } from 'rsuite'\n\nfunction Detail(props) {\n    console.log(\"sasdasdasdasdasdas\", props)\n    const [data, setdata] = useState(null)\n\n    useEffect(() => {\n        axios.get(`http://www.omdbapi.com/?i=${props.match.params.id}&&apikey=44a4d11c`)\n            .then(({ data }) => {\n                setdata(data)\n            })\n        return () => {\n        }\n    }, [])\n    const { Title, Year, Rated, Released, Genre, Writer, Actors, Plot, Poster } = data || {}\n    return Poster ? <div className=\"movie-detail\">\n        <div className=\"movie-detail-inner\">\n            <span onClick={() => props.history.goBack()} style={{ cursor: \"pointer\" }}>\n                <Icon icon=\"back-arrow\" size=\"2x\" />\n            </span>\n            <img src={Poster} alt=\"\" />\n            <p>{Genre}</p>\n            <p>{Released}</p>\n            <p>{Title}</p>\n            <p>{Writer}</p>\n            <p>{Actors}</p>\n        </div>\n    </div>\n        : null\n}\n\nexport default Detail","import React, { useState } from 'react'\nimport Card from './card'\nimport './card.scss'\n\nconst syncStorage = (maindata, data, isFav) => {\n    const local = JSON.parse(window.localStorage.getItem(\"favs\")) || []\n    if (!isFav) {\n        return window.localStorage.setItem(\"favs\", JSON.stringify(local.filter(each => each.imdbID !== data.imdbID)))\n    }\n    else {\n        data.isFav = true\n        local.push(data)\n        window.localStorage.setItem(\"favs\", JSON.stringify(local))\n    }\n}\n\nfunction Favs(props) {\n    const storage = JSON.parse(window.localStorage.getItem(\"favs\"))\n    const [results, setresults] = useState(storage)\n    const markFav = (obj, isFav) => {\n        syncStorage(\"\", obj, isFav)\n    }\n    return (\n        <div className=\"favs-wrapper\" style={{ maxWidth: \"1300px\", margin: \"60px auto 0\" }}>\n            {\n                <div className=\"main-content\">\n                    {\n                        results && results.length\n                            ? results.map(each => {\n                                return <Card key={each.imdbID} {...each} data={each} markFav={markFav} hideButton={true} />\n                            })\n                            : <p>No movies in your favourite list</p>\n                    }\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Favs\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'rsuite/dist/styles/rsuite-default.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Detail from './detail';\nimport Favs from './favs';\n\nconst AppNew = <Switch>\n  <Route path=\"/:type/:id\" component={Detail} />\n  <Route path=\"/favs\" component={Favs} />\n  <Route exact path=\"/\" component={App} />\n\n</Switch>\n\nReactDOM.render(\n  <BrowserRouter>\n    {AppNew}\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}